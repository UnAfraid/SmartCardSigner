buildscript {
    repositories {
        maven {
	      url "https://plugins.gradle.org/m2/"
	    }
    }

    dependencies {
        classpath "gradle.plugin.edu.sc.seis.gradle:launch4j:2.1.0"
        classpath "com.github.jengelman.gradle.plugins:shadow:1.2.4"
    	classpath "gradle.plugin.de.sebastianboegl.gradle.plugins:shadow-log4j-transformer:1.0.1"
    }
}


apply plugin: "java"
apply plugin: "idea"
apply plugin: "eclipse"
apply plugin: "edu.sc.seis.launch4j"
apply plugin: "com.github.johnrengelman.shadow"
apply plugin: "de.sebastianboegl.shadow.transformer.log4j"

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

eclipse {
	project {
		natures("org.springsource.ide.eclipse.gradle.core.nature")
	}
}

tasks.eclipse.doLast {
	copy {
		from("eclipse-settings")
		into(".settings")
	}
}

tasks.cleanEclipse.doLast {
	delete(".settings")
}

tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

task wrapper(type: Wrapper) {
    gradleVersion = "3.0"
}

dependencies {
	// compile(fileTree(dir: "libs", include: "*.jar"))
    compile(group: "com.google.code.gson", name: "gson", version: "2.3.1")
    compile(group: "org.slf4j", name: "slf4j-api", version: "1.7.12")
    compile(group: "org.apache.logging.log4j", name: "log4j-slf4j-impl", version: "2.3")
    compile(group: "org.apache.logging.log4j", name: "log4j-core", version: "2.3")
	compile(group: "io.netty", name: "netty-all", version: "4.1.7.Final")
    compile(group: "tv.cntt", name: "netty-router", version: "2.0.0") {
    	exclude module: "netty-all"
    }
    compile(group: "org.javassist", name: "javassist", version: "3.20.0-GA")
    compile(group: "org.reflections", name: "reflections", version: "0.9.10")
}

def generalManifest = manifest {
	attributes(
		"Built-By": System.getProperty("user.name"),
		"Implementation-URL": "http://www.l2junity.org/",
		"Main-Class": "com.github.unafraid.signer.gui.Main",
	)
}

jar {
    manifest {
        from(generalManifest)
    }
}

shadowJar {
    manifest {
        from(generalManifest)
    }
}

launch4j {
    copyConfigurable = project.tasks.shadowJar.outputs.files
    jar = "lib/${project.tasks.shadowJar.archiveName}"
    mainClassName = "com.github.unafraid.signer.gui.Main"
    icon = project.projectDir.getAbsolutePath() + "/launch4j/app.ico"
    manifest = project.projectDir.getAbsolutePath() + "/launch4j/Signer.exe.manifest"
}